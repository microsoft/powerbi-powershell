# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: PR Build
run-name: Executing Build for ${{ github.actor }} on ${{ github.repository }} for branch ${{ github.ref }}

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - master

jobs:
  Build:
    runs-on: [self-hosted, 1ES.Pool=powerbi-powershell-pool]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need for history to be able to determine version number
      
      - name: Disable StrongName
        shell: pwsh
        run: |
          scripts/DisableStrongName.ps1
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          # Semantic version range syntax or exact version of a dotnet version
          #dotnet-version: '8.x'
          global-json-file: 'global.json'
      
      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.*proj','**/*.props','**/*.targets','**/*.cs') }}
          restore-keys: |
            ${{ runner.os }}-nuget
      
      - name: Restore dependencies
        run: dotnet restore dirs.proj
      
      - name: Build
        run: dotnet build --no-restore dirs.proj --property:GenerateFullPaths=true --verbosity normal
      
      - name: Test
        run: dotnet test --no-build --no-restore --collect "Code Coverage" -p:CollectCoverage=true -p:CoverletOutputFormat=cobertura --filter "TestCategory!=Interactive" --verbosity normal --logger trx --results-directory "TestResults" dirs.proj
      
      - name: Publish Test Results
        uses: actions/upload-artifact@v4
        with:
          name: TestResults
          path: TestResults
        if: ${{ always() }}

      - name: Upload Code Coverage
        uses: actions/upload-artifact@v4
        with:
          name: CodeCoverage
          path: src/**/coverage.cobertura.xml
        if: ${{ always() }}

  Publish-Code-Coverage:
    runs-on: ubuntu-latest
    needs: Build
    permissions: 
      pull-requests: write
    if: ${{ always() && needs.Build.result == 'success' }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # Don't need full history for this job

      - name: Download Code Coverage
        uses: actions/download-artifact@v4
        with:
          name: CodeCoverage
          path: TestResults

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'
          dotnet-quality: 'ga'

      - name: ReportGenerator
        uses: danielpalme/ReportGenerator-GitHub-Action@5.4.8
        with:
          reports: TestResults/**/coverage.cobertura.xml
          targetdir: CodeCoverageReport
          sourcedirs: src
          reporttypes: HtmlInline;MarkdownSummaryGithub;Cobertura
      
      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: CodeCoverageReport # Artifact name        
          path: CodeCoverageReport # Directory containing files to upload

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: CodeCoverageReport/Cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '17 80'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Publish coverage in build summary # Only applicable if 'MarkdownSummaryGithub' or one of the other Markdown report types is generated
        run: cat CodeCoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY # Adjust path and filename if necessary
        shell: bash
